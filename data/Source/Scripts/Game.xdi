<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
#using \{720C0A68-B608-2F40-8EBA-F7E42EB27F61}
#using \{FC4400A2-BDB6-BA45-9A22-12B9676E71FA}
#using \{F266FE75-7BF7-BC4C-9616-06D2B5F5F6E8}
#using \{A90BA121-008F-42FC-82B9-2595B8A933A2}

#using \{1DC37C6A-0C0C-A546-825E-B8F6E6088209}
#using \{21076EFA-565B-E044-8E13-BC01DB4BA31E}
#using \{126D6B63-5192-104A-BAE3-F178A1229D8C}

import(traktor)

local GhostEntityId = Guid("\{0176DFB1-8604-4648-ACBD-A46B1DE4472C}")
local BulletEntityId = Guid("\{8B5EE76D-1800-4587-A4D8-3223FAC05AAF}")

Game = Game or class("Game", Stage)

function Game:new(params, environment)
	Stage.new(self, params, environment)

	self._environment = environment
	self._inputMapping = environment.input.inputMapping
	self._lobbyManager = params

	self._projectileManager = ProjectileManager(
		self.world,
		environment.physics.physicsManager
	)

	local Tspawn = self:getSpawnLocation()
	local playerEntity = self.world.world:getEntity("Player")
	playerEntity.transform = Tspawn

	-- Initialize UiKit.
	Widget.initialize(
		environment.resource.resourceManager,
		{ "\{43489F5B-5785-1249-A7BA-CB5259C3F064}", "\{27DDC0FD-39DE-0946-BB1B-7D84A001C522}", "\{5ABEAE05-EB26-934F-932F-7F3C7C582383}" }
	)

	-- Create frame.
	self._frame = Frame(
		self.spark.root,
		1280, 720,
		FloodLayout()
	)
	self._frame:update()

	self._flipBook = Flipboard(self._frame)

	HudView(self._flipBook)

	MainView(self._flipBook)
		:setHorizontalAlign(Widget.ALIGN_CENTER)
		:setVerticalAlign(Widget.ALIGN_CENTER)
		:setOnPlay(function() self:resumePlay() end)
		:setOnOptions(function() self._flipBook:showPage("OPTIONS") end)
		:setOnExit(function() self:exitPlay() end)

	OptionsView(self._flipBook)
		:setHorizontalAlign(Widget.ALIGN_CENTER)
		:setVerticalAlign(Widget.ALIGN_CENTER)
		:setOnReturn(function() self._flipBook:showPage("MAIN") end)

	self._flipBook:showPage("HUD")

	-- Ensure frame is properly layed out.
	self._frame:layout()

	self._updateFn = Game.updatePlaying
	self._environment.input.inputSystem:setExclusive(true)
end

function Game:postUpdate(info)
	if self._updateFn == Game.updatePlaying then
		local pitch = self._inputMapping:getStateValue("STATE_PITCH")
	
		-- Get relevant entities.
		local playerEntity = self.world.world:getEntity("Player")
		local cameraEntity = self.world.world:getEntity("Camera0")
	
		-- Get transform of Camera binding.
		local groupComponent = playerEntity:getComponent(world.GroupComponent)
		local Thead = groupComponent:getEntity("Camera", 0).transform
	
		-- Update camera transform to follow binding.
		cameraEntity.transform = Thead * Transform(
			Vector4.zero,
			Quaternion.fromEulerAngles(0, pitch, 0)
		)
	end
end

function Game:update(info)

	-- Update systems.
	self._lobbyManager:update()

	-- Use network time.
	local t = self._lobbyManager._time
	self.world.alternateTime = t

	-- Update state.
	self:_updateFn(info)

	Tween.update(info.simulationDeltaTime)
end

-- private

function Game:getSpawnLocation()
	local spawnEntities = self.world.world:getEntities("Spawn")
	local idx = math.random(0, spawnEntities.size - 1)
	local spawnEntity = spawnEntities:get(idx)
	return spawnEntity.transform
end

function Game:updatePlaying(info)
	-- Read input state values.
	local escape = self._inputMapping:isStatePressed("STATE_ESCAPE")
	local deltaHead = self._inputMapping:getStateValue("STATE_HEAD")
	local pitch = self._inputMapping:getStateValue("STATE_PITCH")
	local moveZ = self._inputMapping:getStateValue("MOVE_Z") * 0.6
	local moveX = self._inputMapping:getStateValue("MOVE_X") * 0.4
	local jump = self._inputMapping:isStatePressed("STATE_JUMP")
	local fire = self._inputMapping:isStatePressed("STATE_FIRE")

	-- Enter menu when application becomes inactive or escape.
	if escape then
		self._flipBook:showPage("MAIN")
		self._updateFn = Game.updateMenu
		self._environment.input.inputSystem:setExclusive(false)
		return
	end

	-- Get relevant entities.
	local playerEntity = self.world.world:getEntity("Player")
	local cameraEntity = self.world.world:getEntity("Camera0")

	-- Get player's character controller.
	local playerCharacter = playerEntity:getComponent(physics.CharacterComponent)
	local playerScript = playerEntity:getComponent(world.ScriptComponent)

	-- Issue movement of player character.
	local Qhead = Quaternion.fromEulerAngles(playerCharacter.headAngle, 0, 0)
	local Vmove = Qhead:transform(Vector4(moveX, 0, moveZ, 0))

	playerCharacter.headAngle = playerCharacter.headAngle + deltaHead * 0.01
	playerCharacter:move(Vmove, false)
	playerScript._pitch = pitch

	if jump then
		playerScript:jump()
	end

	if fire then
		playerScript:fire()
	end

	if self._lobbyManager._replicator ~= nil then
		local replicator = self._lobbyManager._replicator

		-- Set origin for replication origin.
		replicator.origin = playerEntity.transform.translation
		replicator:setSendState(true)

		-- Pack player state.
		replicator.state = playerScript:captureState()

		-- Send fire event.
		if fire then
			local event = PropertyGroup()
			event:setProperty("Fire", true)
			replicator:broadcastEvent(event, false)
		end

		if self.__hack == nil then
			replicator:addEventListener(PropertyGroup, function(replicator, eventTime, fromProxy, eventObject)
				local ghostEntity = fromProxy.object
				if ghostEntity ~= nil then
					ghostEntity:getComponent(world.ScriptComponent):fire()
				end
				return true
			end)

			self.__hack = true
		end

		for i = 0, replicator.proxyCount - 1 do
			local proxy = replicator:getProxy(i)
			if proxy.connected and proxy.latencyReliable then
				if proxy.stateTemplate == nil then
					assert(proxy.object == nil)

					-- Since proxy doesn't have a state template we assume
					-- this is the first time proxy gets updated, thus
					-- create a ghost entity.

					local ghostEntity = self.world:createEntity(GhostEntityId)
					self.world:addEntity(ghostEntity)

					proxy.stateTemplate = Character.createStateTemplate()
					proxy.sendState = true
					proxy.object = ghostEntity
				else
					local ghostEntity = proxy.object

					-- Create local state of ghost; used to filter
					-- new state.
					local ghostScript = ghostEntity:getComponent(world.ScriptComponent)
					local localState = ghostScript:captureState()

					local t = self._lobbyManager._time
					local state = proxy:getFilteredState(t, 0.2, localState, 0.7)
					if state ~= nil then
						ghostScript:applyState(state)
					end

					proxy.origin = ghostEntity.transform.translation
				end
			end
		end
	end

	self._projectileManager:update(info)
end

function Game:updateMenu()
end

function Game:resumePlay()
	self._flipBook:showPage("HUD")
	self._updateFn = Game.updatePlaying
	self._environment.input.inputSystem:setExclusive(true)
end

function Game:exitPlay()
	local nxt = self:loadStage("LOADING", { next = "FRONTEND", lobbyManager = self._lobbyManager })
	self:gotoStage(nxt)
end

	]]>
	</text>
</object>
