<?xml version="1.0" encoding="utf-8"?>
<object type="traktor.script.Script" version="2">
	<text>
	<![CDATA[
import(traktor)

Character = Character or class("Character", world.ScriptComponent)

function Character:new()
	self._lastTransform = Transform()
end

function Character:update(contextObject, totalTime, deltaTime)
	local RunThreshold < const > = 2

	local T = self.owner.transform
	local offset = T.translation - self._lastTransform.translation
	local velocity = offset / deltaTime

	-- Into object space.
	velocity = T.rotation:inverse():transform(velocity)

	-- Determine animation state from velocity.
	local strafeLeft = false
	local strafeRight = false
	local runForward = false
	local runBackwards = false
	local jumpForward = false

	if math.abs(velocity.x) > math.abs(velocity.z) then
		strafeLeft = (velocity.x < -0.1)
		strafeRight = (velocity.x > 0.1)
	else
		runForward = (velocity.z > 0.01)
		runBackwards = (velocity.z < -0.01)
	end		

	-- Expose conditions in state pose controller.
	local skeletonComponent = self.owner:getComponent(animation.SkeletonComponent)
	if skeletonComponent ~= nil then
		skeletonComponent.poseController:setCondition(
			"StrafeLeft",
			strafeLeft,
			true
		)
		skeletonComponent.poseController:setCondition(
			"StrafeRight",
			strafeRight,
			true
		)
		skeletonComponent.poseController:setCondition(
			"RunForward",
			runForward,
			true
		)
		skeletonComponent.poseController:setCondition(
			"RunBackwards",
			runBackwards,
			true
		)
	end

	self._lastTransform = T 
end

function Character.createStateTemplate()
	local stateTemplate = jungle.StateTemplate()
	stateTemplate:declare(jungle.TransformTemplate("Transform"))
	stateTemplate:declare(jungle.VectorTemplate("Velocity"))
	return stateTemplate
end

function Character:captureState()
	local state = jungle.State()
	state:packBegin()
	state:pack(jungle.TransformValue(self.owner.transform))
	state:pack(jungle.VectorValue(self.owner:getComponent(physics.CharacterComponent).velocity))
	return state
end

function Character:applyState(state)
	state:unpackBegin()
	local transform = state:unpack():get()
	local velocity = state:unpack():get()
	self.owner.transform = transform
	self.owner:getComponent(physics.CharacterComponent).velocity = velocity
end

	]]>
	</text>
</object>
